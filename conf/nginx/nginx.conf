worker_processes  1;
env PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/opt/tizr/multimedia/bin:/opt/tizr/multimedia/bin/aws;

events {
    worker_connections  1024;
}

#Generates DASH / HLS live content from rtmp sources
rtmp {
		log_format encoder '$remote_addr [$time_local] $command "$app" "$name" "$args" - $bytes_received $bytes_sent "$pageurl" "$flashver" ($session_readable_time)';
    access_log /var/log/nginx/access-rtmp.log encoder;
    
    
    server {
        listen 1935;
        notify_method get;
				
				# Authentication mecanism. The one below always return a HTTP 2xx code
				on_connect http://localhost/onconnect_auth;
				
        chunk_size 4096;
        
        application dash {
            live on;
            dash on;
            dash_playlist_length 60s;
            dash_fragment 5s;
            allow publish 127.0.0.1;
						deny publish all;
            # defines where dash files will generated on the server filesystem
            dash_path /var/www/dashLive;
        }

        application hls {
        		live on;
            hls on;
            hls_path /mnt/hlsLive;
            hls_playlist_length 30s;
            hls_fragment 5s;
            hls_cleanup off;
            hls_nested on;
            allow publish 127.0.0.1;
						deny publish all;

            record all;
            record_path /var/www/hlsVod;
          
						# convert recorded files to HLS VOD format
						exec_record_done exec_record_done_hls.sh $path $filename $dirname $basename $args;
        }
        
        # rtmp applications that receives a stream, transcodes it 
        # and sends it to DASH or HLS live rtmp application
        application inbound {
            live on;
            record all;
            record_path /var/www/hlsVod;
            on_publish http://localhost/on_publish; # streams.js [ Eventually create and ] start a TiZR Client Stream
            on_publish_done http://localhost/on_publish_done; # streams.js Stop a TiZR Client Stream
            
						# Encoding process
            exec_push encoding.sh $app $name $args;
                        
            # convert recorded file to mp4 format
						exec_record_done exec_record_done_src.sh $path $dirname $basename $args;
        }
               
        application inbound2dash {
            live on;
            exec_push ffmpeg -i rtmp://localhost/$app/$name -threads 2 
            -c:v libx264 -profile:v baseline -g 10 -b:v 300K -s 320x240 -c:a aac -ac 1 -strict -2 -b:a 64k -f flv rtmp://localhost/dash/$name_low 
            -c:v libx264 -profile:v baseline -g 10 -b:v 300K -s 320x240 -c:a aac -ac 1 -strict -2 -b:a 64k -f flv rtmp://localhost/dash/$name_med 
            -c:v libx264 -profile:v baseline -g 10 -b:v 300K -s 320x240 -c:a aac -ac 1 -strict -2 -b:a 64k -f flv rtmp://localhost/dash/$name_hi 
            2>>/var/log/ffmpegLog/dash-${name}.log;
        }
    }
}

# serves over HTTP the DASH / HLS content generated above 
# or already present on the server filesystem 
http {
		# Default nginx log format
		log_format encoder '$remote_addr - $remote_user [$time_local] "$request" $status $bytes_sent "$http_referer" "$http_user_agent"';
		access_log /var/log/nginx/access-http.log encoder;

		server {
        # in case we have another web server on port 80
				listen 80;
				resolver 10.0.0.2 valid=10s;

				# Self signed certificate
				# listen 443 ssl;
        # ssl_certificate /etc/nginx/ssl/nginx.crt;
        # ssl_certificate_key /etc/nginx/ssl/nginx.key;
				
        location / {
        		root /var/www;
            index  index.html index.htm;
        }

        # This URL provides RTMP statistics in XML
        location = /stat {
        		access_log off;
            rtmp_stat all;
            rtmp_stat_stylesheet stat.xsl;
        }

        location /stat.xsl {
            # XML stylesheet to view RTMP stats.
            # Copy stat.xsl wherever you want
            # and put the full directory path here
            root /var/www/;
        }

				# set to bypass authentication mecanism
				location /onconnect_auth {
					if ($arg_token = "token") {
						return 201; 
					} 
				return 201;
				} 

				#Tests listeners
				location /on_publish {
						# /on_publish?app=inbound&flashver=&swfurl=&tcurl=rtmp://localhost:0/inbound&pageurl=&addr=127.0.0.1&clientid=1&call=publish&name=bbb10&type=live&unid=company1 HTTP/1.0" 201 146 "-" "-"
						proxy_http_version 1.1;
						proxy_method PUT;
						proxy_set_header Authorization "Bearer eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJpZCI6MiwiZW1haWwiOiJjaHJpc3RvcGhlLnMuYmVybmFyZEBnbWFpbC5jb20iLCJmaXJzdG5hbWUiOiJDaHJpc3RvcGhlIiwibGFzdG5hbWUiOiJCZXJuYXJkIiwicm9sZXMiOlsiYXV0aGVudGljYXRlZCIsImFkbWluIl0sImNyZWF0ZWRfYXQiOiIyMDE1LTEwLTI2VDIzOjMyOjQ3Ljk4MVoiLCJ1cGRhdGVkX2F0IjoiMjAxNS0xMC0yNlQyMzozMjo0Ny45ODFaIiwiZGVsZXRlZF9hdCI6bnVsbCwiaWF0IjoxNDQ2MjM3ODYwfQ.d5MRsyrxomX1oUG0CHJz07OsW5-lUEa8nKijrSewTBY";
						proxy_set_header REMOTE_ADDR $remote_addr;
						proxy_set_header X-Real-IP $remote_addr;
						proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
						proxy_set_header X-Forwarded-Proto $scheme;
						proxy_set_header Upgrade $http_upgrade;
						proxy_set_header Connection 'upgrade';
						proxy_set_header Host $host;
						proxy_cache_bypass $http_upgrade;
						proxy_pass http://api.app-tizr.com/v1/clients/$arg_unid/streams/$arg_name/start; 
				}

				location /on_publish_done {
						# /on_publish_done?app=inbound&flashver=&swfurl=&tcurl=rtmp://localhost:0/inbound&pageurl=&addr=127.0.0.1&clientid=1&call=publish_done&name=bbb10&unid=company1 HTTP/1.0" 201 146 "-" "-"
						proxy_http_version 1.1;
						proxy_method PUT;
						proxy_set_header Authorization "Bearer eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJpZCI6MiwiZW1haWwiOiJjaHJpc3RvcGhlLnMuYmVybmFyZEBnbWFpbC5jb20iLCJmaXJzdG5hbWUiOiJDaHJpc3RvcGhlIiwibGFzdG5hbWUiOiJCZXJuYXJkIiwicm9sZXMiOlsiYXV0aGVudGljYXRlZCIsImFkbWluIl0sImNyZWF0ZWRfYXQiOiIyMDE1LTEwLTI2VDIzOjMyOjQ3Ljk4MVoiLCJ1cGRhdGVkX2F0IjoiMjAxNS0xMC0yNlQyMzozMjo0Ny45ODFaIiwiZGVsZXRlZF9hdCI6bnVsbCwiaWF0IjoxNDQ2MjM3ODYwfQ.d5MRsyrxomX1oUG0CHJz07OsW5-lUEa8nKijrSewTBY";
						proxy_set_header REMOTE_ADDR $remote_addr;
						proxy_set_header X-Real-IP $remote_addr;
						proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
						proxy_set_header X-Forwarded-Proto $scheme;
						proxy_set_header Upgrade $http_upgrade;
						proxy_set_header Connection 'upgrade';
						proxy_set_header Host $host;
						proxy_cache_bypass $http_upgrade;
						proxy_pass http://api.app-tizr.com/v1/clients/$arg_unid/streams/$arg_name/stop;
				}

				location /on_vod_ready {
						# /on_vod_ready?name=bbb10&unid=company1 HTTP/1.0" 201 146 "-" "-"
						proxy_http_version 1.1;
						proxy_method PUT;
						proxy_set_header Authorization "Bearer eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJpZCI6MiwiZW1haWwiOiJjaHJpc3RvcGhlLnMuYmVybmFyZEBnbWFpbC5jb20iLCJmaXJzdG5hbWUiOiJDaHJpc3RvcGhlIiwibGFzdG5hbWUiOiJCZXJuYXJkIiwicm9sZXMiOlsiYXV0aGVudGljYXRlZCIsImFkbWluIl0sImNyZWF0ZWRfYXQiOiIyMDE1LTEwLTI2VDIzOjMyOjQ3Ljk4MVoiLCJ1cGRhdGVkX2F0IjoiMjAxNS0xMC0yNlQyMzozMjo0Ny45ODFaIiwiZGVsZXRlZF9hdCI6bnVsbCwiaWF0IjoxNDQ2MjM3ODYwfQ.d5MRsyrxomX1oUG0CHJz07OsW5-lUEa8nKijrSewTBY";
						proxy_set_header REMOTE_ADDR $remote_addr;
						proxy_set_header X-Real-IP $remote_addr;
						proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
						proxy_set_header X-Forwarded-Proto $scheme;
						proxy_set_header Upgrade $http_upgrade;
						proxy_set_header Connection 'upgrade';
						proxy_set_header Host $host;
						proxy_cache_bypass $http_upgrade;
						proxy_pass http://api.app-tizr.com/v1/clients/$arg_unid/streams/$arg_name/vod-ready;
				} 				

        # Serve live DASH fragments
        location /dash_live {
            # defines where the DASH files will retrieved on the server filesystem
            alias /var/www/dashLive;

            # currently opens wide CORS, must be configured according to your needs
            add_header 'Access-Control-Allow-Origin' '*';

            # necessary for live content (manifest must always be loaded from server, not from cache)
            add_header Cache-Control no-cache;
        }

        # Serve vod DASH fragments
        location /dash_vod {
            alias /var/www/dashVod;
            add_header 'Access-Control-Allow-Origin' '*';

            # necessary if media files contain more than one DASH fragment
            if ($request_method = 'OPTIONS') {
                add_header 'Access-Control-Allow-Credentials' 'true';
                add_header 'Access-Control-Allow-Methods' 'GET, OPTIONS';

                # Custom headers and headers various browsers *should* be OK with but aren't
                add_header 'Access-Control-Allow-Headers' 'DNT,X-Mx-ReqToken,Keep-Alive,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Range';

                # Tell client that this pre-flight info is valid for 20 days
                add_header 'Access-Control-Max-Age' 1728000;

                add_header 'Content-Type' 'text/plain charset=UTF-8';
                add_header 'Content-Length' 0;
                add_header 'Access-Control-Allow-Origin' '*';

                return 204;
            }
        }

        # Serve live HLS fragments
        location /hls_live {
            types {
                 application/vnd.apple.mpegurl m3u8;
                 video/mp2t ts;
               }
            alias /mnt/hlsLive;
            add_header Cache-Control no-cache;
            add_header 'Access-Control-Allow-Origin' '*';
        }

        # Serve vod HLS fragments
        location /hls_vod {
            types {
                application/vnd.apple.mpegurl m3u8;
                video/mp2t ts;
            }
            alias /mnt/hlsVod;
            add_header 'Access-Control-Allow-Origin' '*';
            expires -1;
        }

    }
}

